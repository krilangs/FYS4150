import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D

def get_dim(filename):
    """
    Get the dimension of the data files.
    """
    with open(filename+"_DIM.txt", "r") as infile:
        line1 = infile.readline()
        n = int(line1.split()[0])
        m = float(line1.split()[1])
        m = int(m)
    return n, m

def read_file(filename, n, m):
    """
    Read the data files and order in the the files according to the dimensions.
    """
    a = np.fromfile(filename)
    return a.reshape(m, n)

def SolarSystem(names, filename):
    """
    Plot the whole Solar system in 3D and 2D.
    """
    n, m = get_dim(filename)
    pos_x = read_file(filename + "_x", n, m)
    pos_y = read_file(filename + "_y", n, m)
    pos_z = read_file(filename + "_z", n, m)
    maxX = np.max(pos_x)
    maxY = np.max(pos_y)
    max = np.max([maxX, maxY])
    fig = plt.figure(figsize=(10,10))
    ax = fig.gca(projection="3d")
    ax.text2D(0.3, 0.95, "3D plot of the Solar system", transform=ax.transAxes, size=15)

    ax.set_xlim(-max, max)
    ax.set_ylim(-max, max)
    ax.set_zlim(-20, 20)
    ax.set_xlabel("x [AU]", fontsize=15)
    ax.set_ylabel("y [AU]", fontsize=15)
    ax.set_zlabel("z [AU]", fontsize=15)
    ax.tick_params(labelsize=15)
    ax.grid(True)
    for i, N in enumerate(names):
        ax.plot(pos_x[i], pos_y[i], pos_z[i], label = N, linewidth=0.5)
    ax.legend(loc="upper left", fontsize=15)
    ax.xaxis.labelpad=10
    ax.yaxis.labelpad=10
    fig.tight_layout()
    plt.savefig("Figures/3D_SolarSystem.png")

    plt.figure()
    plt.title("2D plot of the Solar system", size=15)
    for i, N in enumerate(names):
        plt.plot(pos_x[i], pos_y[i], label = N, linewidth=0.5)
    plt.legend(loc="best")
    plt.xlabel("x [AU]", fontsize=15)
    plt.ylabel("y [AU]", fontsize=15)
    fig.tight_layout()
    plt.savefig("Figures/2D_SolarSystem.png")
    plt.show()

def InnerSystem(filename):
    names = ["Sun", "Mercury", "Venus", "Earth", "Mars"]
    n, m = get_dim(filename)
    pos_x = read_file(filename + "_x", n, m)
    pos_y = read_file(filename + "_y", n, m)
    pos_z = read_file(filename + "_z", n, m)

    fig = plt.figure(figsize=(8,8))
    ax = fig.gca(projection="3d")
    ax.text2D(0.3, 0.95, "3D plot of the inner Solar system", transform=ax.transAxes, size=15)
    years = int(2*n/100)

    ax.set_xlim(-1.5, 1.5)
    ax.set_ylim(-1.5, 1.5)
    ax.set_zlim(-1.0, 1.0)
    ax.set_xlabel("x [AU]", fontsize=15)
    ax.set_ylabel("y [AU]", fontsize=15)
    ax.set_zlabel("z [AU]", fontsize=15)
    ax.tick_params(labelsize=15)
    ax.grid(True)
    for i, N in enumerate(names):
        ax.plot(pos_x[i][0:years], pos_y[i][0:years], pos_z[i][0:years], label = N, linewidth=0.5)
    ax.legend(loc="upper left", fontsize=15)
    ax.xaxis.labelpad=10
    ax.yaxis.labelpad=10
    ax.zaxis.labelpad=10
    fig.tight_layout()
    plt.savefig("Figures/3D_Inner_SolarSystem.png")

    plt.figure()
    plt.title("2D plot of the inner Solar system", size=15)
    for i, N in enumerate(names):
        plt.plot(pos_x[i][0:years], pos_y[i][0:years], label = N, linewidth=0.5)
    plt.legend(loc="best")
    plt.xlabel("x [AU]", fontsize=15)
    plt.ylabel("y [AU]", fontsize=15)
    fig.tight_layout()
    plt.savefig("Figures/2D_Inner_SolarSystem.png")
    plt.show()

def plot_SEJ(names, filename):
    """
    Plot the motion of the three-body problem with CM of the Solar system.
    """
    n, m = get_dim(filename)
    pos_x = read_file(filename + "_x", n, m)
    pos_y = read_file(filename + "_y", n, m)

    plt.figure()
    plt.title("Motion of the Sun, Earth and Jupiter", size=15)
    for i, n in enumerate(names):
        plt.plot(pos_x[i], pos_y[i], label = n, linewidth=0.5)
    plt.legend(fontsize=15)
    plt.xlabel("x [AU]", size=15)
    plt.ylabel("y [AU]", size=15)
    plt.tight_layout()
    plt.savefig("Figures/" + filename + ".png")

    plt.figure()
    plt.title("Motion of the Sun zoomed in", size=15)
    plt.plot(pos_x[0], pos_y[0], linewidth=0.5)
    plt.xlabel("x [AU]", size=15)
    plt.ylabel("y [AU]", size=15)
    plt.tight_layout()
    plt.savefig("Figures/" + filename + "_zoomed.png")
    plt.show()

def plot_EJ_mass_compare(names, filenames, filename):
    r = 0.00464913034*20
    fig = plt.figure(figsize=(10,10))
    ax = fig.gca(projection='3d')
    ax.set_xlabel(r'$x \ \ [AU]$', fontsize=15)
    ax.set_ylabel(r'$y \ \ [AU]$', fontsize=15)
    ax.set_zlabel(r'$z \ \ [AU]$', fontsize=15)
    ax.xaxis.pane.fill = False
    ax.yaxis.pane.fill = False
    ax.zaxis.pane.fill = False
    u = np.linspace(0, 2 * np.pi, 50)
    v = np.linspace(0, np.pi, 50)
    x = r * np.outer(np.cos(u), np.sin(v))
    y = r * np.outer(np.sin(u), np.sin(v))
    z = r * np.outer(np.ones(np.size(u)), np.cos(v))
    for k in filenames:
        n, m = get_dim(k)
        pos_x = read_file(k + "_x", n, m)
        pos_y = read_file(k + "_y", n, m)
        pos_z = read_file(k + "_z", n, m)
        maxX = np.max(pos_x)
        maxY = np.max(pos_y)
        max = 5
        for i, n in enumerate(names):
            ax.plot(pos_x[i], pos_y[i], pos_z[i], label = n, linewidth=0.5)
    ax.legend()
    ax.set_xlim(-max, max)
    ax.set_ylim(-max, max)
    ax.set_zlim(-max, max)
    # Plot the surface
    ax.plot_surface(x, y, z, color='yellow')
    ax.scatter(0.0,0.0,0.0, color='yellow', label='Sun')
    # Now set color to white (or whatever is "invisible")
    ax.xaxis.pane.set_edgecolor('w')
    ax.yaxis.pane.set_edgecolor('w')
    ax.zaxis.pane.set_edgecolor('w')
    #plt.savefig(filename + ".pdf")
    #plt.close()
    plt.show()

def plot_EJ_compare(names, filenames, filename):
    r = 0.00464913034*20
    fig = plt.figure(figsize=(10,10))
    ax = fig.gca(projection='3d')
    ax.set_xlabel(r'$x \ \ [AU]$', fontsize=15)
    ax.set_ylabel(r'$y \ \ [AU]$', fontsize=15)
    ax.set_zlabel(r'$z \ \ [AU]$', fontsize=15)
    ax.xaxis.pane.fill = False
    ax.yaxis.pane.fill = False
    ax.zaxis.pane.fill = False
    u = np.linspace(0, 2 * np.pi, 50)
    v = np.linspace(0, np.pi, 50)
    x = r * np.outer(np.cos(u), np.sin(v))
    y = r * np.outer(np.sin(u), np.sin(v))
    z = r * np.outer(np.ones(np.size(u)), np.cos(v))
    for k in filenames:
        n, m = get_dim(k)
        pos_x = read_file(k + "_x", n, m)
        pos_y = read_file(k + "_y", n, m)
        pos_z = read_file(k + "_z", n, m)
        maxX = np.max(pos_x)
        maxY = np.max(pos_y)
        max = 5
        for i, n in enumerate(names):
            ax.plot(pos_x[i], pos_y[i], pos_z[i], label = n, linewidth=0.5)
    ax.legend()
    ax.set_xlim(-max, max)
    ax.set_ylim(-max, max)
    ax.set_zlim(-max, max)
    # Plot the surface
    ax.plot_surface(x, y, z, color='yellow')
    ax.scatter(0.0,0.0,0.0, color='yellow', label='Sun')
    # Now set color to white (or whatever is "invisible")
    ax.xaxis.pane.set_edgecolor('w')
    ax.yaxis.pane.set_edgecolor('w')
    ax.zaxis.pane.set_edgecolor('w')
    #plt.savefig(filename + ".pdf")
    #plt.close()
    plt.show()

def plot_2D_compare(filenames):
    for filename in filenames:
        n, m = get_dim(filename)
        pos_x = read_file(filename + "_x", n, m)
        pos_y = read_file(filename + "_y", n, m)
        plt.plot(pos_x, pos_y)
    #plt.legend(labels, fontsize=15)
    #plt.axis('equal')
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)
    plt.grid()
    plt.show()

def plot_2D_EarthSun(m):
    """
    Plot 2D figure of the motion of Earth around the Sun for varying dt
    for Euler and Verlet.
    """
    filenames = ["earth_sun_euler_", "earth_sun_verlet_"]
    i = 0
    for j in range(m):
        for filename in filenames:
            exp = 10**(1+j)
            dt = 10**(-1-j)
            dt = float(dt)
            n, m = get_dim(filename + f"{exp}")
            pos_x = np.fromfile(filename + f"{exp}"+"_x")
            pos_y = np.fromfile(filename + f"{exp}"+"_y")
            plt.figure()
            if i == 0:
                plt.title(f"Forward Euler algorithm with $\\Delta t$={dt}")
            else:
                plt.title(f"Velocity Verlet algorithm with $\\Delta t$={dt}")
            plt.plot(pos_x, pos_y)
            plt.plot([0,0], [0,0], "o")
            plt.xlabel("x [AU]", size=15)
            plt.ylabel("y [AU]", size=15)
            plt.tight_layout()
            plt.savefig("Figures/"+filename+f"{dt}.png")
            i += 1
        plt.show()

def plot_conservation():
    """
    Plot energies and angular momentum of the Earth for Euler and Verlet.
    """
    filenames = ["earth_sun_euler_1000","earth_sun_verlet_1000"]
    for filename in filenames:
        E = np.fromfile(filename + "_energy")
        K = np.fromfile(filename + "_kinetic")
        U = np.fromfile(filename + "_potential")
        L = np.fromfile(filename + "_angular")
        x = np.linspace(0, 10, len(E))
        plt.figure()
        if filename == "earth_sun_euler_100":
            plt.title("Energies with Euler algo")
        else:
            plt.title("Energies with Verlet algo")
        plt.plot(x, E)
        plt.plot(x, K)
        plt.plot(x, U)
        plt.ylabel(r"Energies [$M_\odot$($\frac{AU}{yr})^2$]")
        plt.xlabel("Time [Years]")
        plt.legend(["Total energy", "Kinetic energy", "Potential energy"])
        plt.tight_layout()
        #plt.savefig("Figures/Energy_"+filename+".png")

        plt.figure()
        if filename == "earth_sun_euler_100":
            plt.title("Angular momentum with Euler algo")
        else:
            plt.title("Angular momentum with Verlet algo\n")
        plt.plot(x, L)
        plt.ylabel(r"Angular momentum [$M_E$ $\frac{AU^2}{yr}$]")
        plt.xlabel("Time [Years]")
        plt.tight_layout()
        plt.savefig("Figures/Mom_"+filename+".png")
    plt.show()

def plot_cons():
    """
    Plot energies and angular momentum for three-body problem with CM in
    Solar system.
    """
    filename = "SunEarthJupiter"
    E = np.fromfile(filename + "_energy")
    K = np.fromfile(filename + "_kinetic")
    U = np.fromfile(filename + "_potential")
    L = np.fromfile(filename + "_angular")
    x = np.linspace(0, 10, len(E))

    plt.figure()
    plt.title("Energies for three-body problem")
    plt.plot(x, E)
    plt.plot(x, K)
    plt.plot(x, U)
    plt.ylabel(r"Energies [$M_\odot$($\frac{AU}{yr})^2$]")
    plt.xlabel("Time [Years]")
    plt.legend(["Total energy", "Kinetic energy", "Potential energy"])
    plt.tight_layout()
    plt.savefig("Figures/Energy_"+filename+".png")

    plt.figure()
    plt.title("Angular momentum for three-body problem\n")
    plt.plot(x, L)
    plt.ylabel(r"Angular momentum [$M_E$ $\frac{AU^2}{yr}$]")
    plt.xlabel("Time [Years]")
    plt.tight_layout()
    plt.savefig("Figures/Mom_"+filename+".png")
    plt.show()

def plotBeta(filenames, label):
    """
    Plot the velocity of the Earth as beta increases.
    """
    plt.figure(figsize=(10,10))
    for i, filename in enumerate(filenames):
        plt.subplot(221+i)
        n, m = get_dim(filename)
        pos_x = np.fromfile(filename + "_x")
        pos_y = np.fromfile(filename + "_y")
        if i == 0:
            plt.title(r"Velocity of Earth with v = 6.8 AU/yr, $\beta$="+label)
        elif i == 1:
            plt.title(r"Velocity of Earth with v = 7.4 AY/yr, $\beta$="+label)
        elif i == 2:
            plt.title(r"Velocity of Earth with v = 8.0 AU/yr, $\beta=$"+label)
        elif i == 3:
            plt.title(r"Velocity of Earth with v = 8.8 AU/yr, $\beta=$"+label)
        plt.plot(pos_x, pos_y, label=label)
        plt.plot([0,0], [0,0], "o")
        plt.xlabel("x [AU]", size=15)
        plt.ylabel("y [AU]", size=15)
    plt.tight_layout()
    plt.savefig("Figures/Beta_change_"+label+".png")
    plt.show()

def plotBetaMinMax(filenames):
    """
    Plot orbit of Earth for velocity just above and below escape velocity.
    """
    plt.figure(figsize=(9,5))
    for i, filename in enumerate(filenames):
        plt.subplot(121+i)
        n, m = get_dim(filename)
        pos_x = np.fromfile(filename + "_x")
        pos_y = np.fromfile(filename + "_y")
        if i == 0:
            plt.title("Velocity of Earth just below escape velocity")
            plt.plot(pos_x, pos_y, label="v = 8.875 AU/yr")
        elif i == 1:
            plt.title("Velocity of Earth just above escape velocity")
            plt.plot(pos_x, pos_y, label="v = 8.89 AU/yr")
        plt.plot([0,0], [0,0], "o")
        plt.xlabel("x [AU]", size=15)
        plt.ylabel("y [AU]", size=15)
        plt.legend()
    plt.tight_layout()
    plt.savefig("Figures/Velocities_min_max.png")
    plt.show()

def plotComp():
    plt.figure(figsize=(10,10))
    #plt.subplot(221)
    plt.title(r'Comparison for $\Delta t = 1e-3$', fontsize=15)
    #plt.ylabel(r'$y \ \ [AU]$', fontsize=15)
    plot_2D_compare(["earth_sun_euler_100", "earth_sun_verlet_100"])#, "earth_sun", ["Eulers", "Verlet"])
    #plt.subplot(222)
    plt.title(r'Comparison for $\Delta t = 1e-4$', fontsize=15)
    plot_2D_compare(["earth_sun_euler_1000", "earth_sun_verlet_1000"])#, "earth_sun", ["Eulers", "Verlet"])
    #plt.subplot(223)
    plt.title(r'Comparison for $\Delta t = 1e-5$', fontsize=15)
    #plt.xlabel(r'$x \ \ [AU]$', fontsize=15)
    #plt.ylabel(r'$y \ \ [AU]$', fontsize=15)
    plot_2D_compare(["earth_sun_euler_10000", "earth_sun_verlet_10000"])#, "earth_sun", ["Eulers", "Verlet"])
    #plt.subplot(224)
    plt.title(r'Comparison for $\Delta t = 1e-6$', fontsize=15)
    #plt.xlabel(r'$x  \ \ [AU]$', fontsize=15)
    plot_2D_compare(["earth_sun_euler_10", "earth_sun_verlet_10"])#, "earth_sun", ["Eulers", "Verlet"])
    plt.legend(["Eulers", "Verlet"], fontsize=15)
    #plt.savefig("Comparison.pdf")
    #plt.show()

def plotCompBeta():
    labels = [r"v = 6.8 AU/yr", r"v = 7.4 AY/yr", r"v = 8.0 AU/yr", r"v = 8.8 AU/yr"]
    plt.figure(figsize=(12,12))
    plt.subplot(221)
    plt.title(r' $\beta = 2$', fontsize=15)
    plt.ylabel(r'$y \ \ [AU]$', fontsize=15)
    plot_2D_compare(["Beta_0_1", "Beta_0_2", "Beta_0_3", "Beta_0_4"])
    plt.xlim(-20, 5)
    plt.ylim(-4, 8)
    plt.subplot(222)
    plt.title(r'$\beta = 2.33$', fontsize=15)
    plot_2D_compare(["Beta_1_1", "Beta_1_2", "Beta_1_3", "Beta_1_4"])
    plt.xlim(-40, 10)
    plt.ylim(-10, 40)
    plt.subplot(223)
    plt.title(r'$\beta = 2.67$', fontsize=15)
    plt.xlabel(r'$x \ \ [AU]$', fontsize=15)
    plt.ylabel(r'$y \ \ [AU]$', fontsize=15)
    plot_2D_compare(["Beta_2_1", "Beta_2_2", "Beta_2_3", "Beta_2_4"])
    plt.xlim(-50, 10)
    plt.ylim(-10, 60)
    plt.subplot(224)
    plt.title(r'$\beta = 3$', fontsize=15)
    plt.xlabel(r'$x  \ \ [AU]$', fontsize=15)
    plot_2D_compare(["Beta_3_1", "Beta_3_2", "Beta_3_3", "Beta_3_4"])
    plt.xlim(-50, 5)
    plt.ylim(-40, 60)
    plt.legend(labels, fontsize=15)
    #plt.savefig("ComparisonBeta.pdf")
    plt.close()

def plot_E_compare():
    names = ["Earth", "Jupiter"]
    filename = "earthJupiter"
    n, m = get_dim(filename)
    nE, mE = get_dim("earth_sun")
    r = 0.00464913034*5
    pos_x = read_file(filename + "_x", n, m)
    pos_y = read_file(filename + "_y", n, m)
    pos_z = read_file(filename + "_z", n, m)
    Ex = read_file("earth_sun_x", nE, mE)
    Ey = read_file("earth_sun_y", nE, mE)
    Ez = read_file("earth_sun_z", nE, mE)
    maxX = np.max(Ex)
    maxY = np.max(Ey)
    max = np.max([maxX, maxY])*0.7
    fig = plt.figure(figsize=(10,10))
    ax = fig.gca(projection='3d')
    ax.set_xlim(-max, max)
    ax.set_ylim(-max, max)
    ax.set_zlim(-max, max)
    ax.set_xlabel(r'$x \ \ [AU]$', fontsize=15)
    ax.set_ylabel(r'$y \ \ [AU]$', fontsize=15)
    ax.set_zlabel(r'$z \ \ [AU]$', fontsize=15)
    ax.xaxis.pane.fill = False
    ax.yaxis.pane.fill = False
    ax.zaxis.pane.fill = False
    u = np.linspace(0, 2 * np.pi, 50)
    v = np.linspace(0, np.pi, 50)
    x = r * np.outer(np.cos(u), np.sin(v))
    y = r * np.outer(np.sin(u), np.sin(v))
    z = r * np.outer(np.ones(np.size(u)), np.cos(v))

    ax.plot_surface(x, y, z, color='yellow')
    ax.scatter(0.0,0.0,0.0, color='yellow', label='Sun')

    ax.xaxis.pane.set_edgecolor('w')
    ax.yaxis.pane.set_edgecolor('w')
    ax.zaxis.pane.set_edgecolor('w')

    ax.plot(pos_x[0], pos_y[0], pos_z[0], label = "Earth w/Jupiter", linewidth=0.5)
    ax.plot(Ex[0], Ey[0], Ez[0], label = "Earth wo/Jupiter", linewidth=0.5)
    ax.legend()
    #plt.savefig('earthJupiterCompare.pdf')
    plt.show()

def plot_energyAngular_whole():
    names = ["Sun", "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto"]
    plot_3D(names, "whole")
    E = np.fromfile("whole_energy")
    L = np.fromfile("whole_angular")
    x = np.linspace(0, 1000, 1000)
    mpl.rcParams.update(mpl.rcParamsDefault)
    plt.figure(figsize=(15,5))
    plt.subplot(121)
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)
    plt.xlabel('Years', fontsize=15)
    plt.ylabel(r'$E/E_0$', fontsize=15)
    plt.plot(x, E/E[0])
    plt.title('Change in total energy over time', fontsize=13)
    plt.subplot(122)
    plt.plot(x, L/L[0])
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)
    plt.xlabel('Years', fontsize=15)
    plt.ylabel(r'$L/L_0$', fontsize=15)
    plt.title('Change in total angular momentum over time', fontsize=13, loc='right')
    #plt.savefig('whole_E_L.pdf')
    plt.show()

def compEJ(filenames, names):
    for filename in filenames:
        n, m = get_dim(filename)
        pos_x = read_file(filename + "_x", n, m)
        pos_y = read_file(filename + "_y", n, m)
        plt.figure()
        for i, n in enumerate(names):
            plt.plot(pos_x[i], pos_y[i], label = n, linewidth=0.5)
        plt.legend(fontsize=15)
        plt.xlabel(r'$x \ \ [AU]$', size=15)
        plt.ylabel(r'$y \ \ [AU]$', size=15)
        plt.tight_layout()
        plt.show()

def compareDistEJ(sunFile, filenames, names):
    nE, mE = get_dim(sunFile)
    Epos_x = read_file(sunFile + "_x", nE, mE)
    Epos_y = read_file(sunFile + "_y", nE, mE)
    Epos_z = read_file(sunFile + "_z", nE, mE)
    rE = np.sqrt(Epos_x**2 + Epos_y**2 + Epos_z**2)
    x = np.linspace(0, 50, nE)
    for name in filenames:
        nEJ, mEJ = get_dim(name)
        EJpos_x = read_file(name + "_x", nEJ, mEJ)
        EJpos_y = read_file(name + "_y", nEJ, mEJ)
        EJpos_z = read_file(name + "_z", nEJ, mEJ)

        rEJ = np.sqrt(EJpos_x[0]**2 + EJpos_y[0]**2 + EJpos_z[0]**2)
        rdiff = np.abs(rE[0] - rEJ)/rE[0]
        fig = plt.figure(figsize=(16,6))
        ax = fig.add_subplot(121)
        ax.plot(x, rdiff)
        plt.xlabel(r'Years', fontsize=15)
        plt.ylabel(r'$\frac{|\Delta R|}{R_0}$', fontsize=20)
        plt.ticklabel_format(axis ='y', style='sci', scilimits=(0,0))
        plt.xticks(fontsize=15)
        plt.yticks(fontsize=15)
        ax = fig.add_subplot(122, projection='3d')
        maxX = np.max(EJpos_x)
        maxY = np.max(EJpos_y)
        max = np.max([maxX, maxY])*0.8
        ax.set_xlim(-max, max)
        ax.set_ylim(-max, max)
        ax.set_zlim(-max, max)
        ax.set_xlabel(r'$x \ \ [AU]$', fontsize=15)
        ax.set_ylabel(r'$y \ \ [AU]$', fontsize=15)
        ax.set_zlabel(r'$z \ \ [AU]$', fontsize=15)
        ax.tick_params(labelsize=15)
        ax.xaxis.pane.fill = False
        ax.yaxis.pane.fill = False
        ax.zaxis.pane.fill = False
        # Now set color to white (or whatever is "invisible")
        ax.xaxis.pane.set_edgecolor('w')
        ax.yaxis.pane.set_edgecolor('w')
        ax.zaxis.pane.set_edgecolor('w')
        for i, N in enumerate(names):
            ax.plot(EJpos_x[i], EJpos_y[i], EJpos_z[i], label = N, linewidth=0.5)
        ax.legend(loc='upper left', fontsize=15)
        #plt.savefig(name+'.pdf')
        plt.show()

def plot_EJ(filenames):
    for name in filenames:
        pos_x = np.fromfile(name+ "_x")
        pos_y = np.fromfile(name + "_y")
        plt.plot(pos_x, pos_y)
        plt.show()

names = ["Sun", "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto"]

"""5c) Good"""
#plot_2D_EarthSun(5)
#plot_conservation())

"""5d) Good"""
#plotBetaMinMax(["Earth_Sun_min", "Earth_Sun_max"])
#plotBeta(["Beta_0_1", "Beta_0_2", "Beta_0_3", "Beta_0_4"], "2.00")
#plotBeta(["Beta_1_1", "Beta_1_2", "Beta_1_3", "Beta_1_4"], "2.33")
#plotBeta(["Beta_2_1", "Beta_2_2", "Beta_2_3", "Beta_2_4"], "2.67")
#plotBeta(["Beta_3_1", "Beta_3_2", "Beta_3_3", "Beta_3_4"], "3.00")

"""5f) Good"""
plot_SEJ(["Sun", "Earth", "Jupiter"], "SunEarthJupiter")
#plot_cons()
#InnerSystem("SolarSystem")
#SolarSystem(names, "SolarSystem")




"""5e) ..."""
#compareDistEJ("EarthSun_e", ["EarthJupiter", "EarthJupiter10x", "EarthJupiter1000x"], ["Earth", "Jupiter"])
#compEJ(["EarthJupiter", "EarthJupiter10x", "EarthJupiter1000x"], ["Earth", "Jupiter"])
#plot_EJ(["EarthJupiter", "EarthJupiter10x", "EarthJupiter1000x"])
#plot_SEJ(["Sun", "Earth", "Jupiter"], "SEJ")   # <--
#plot_SEJ(["Sun", "Earth", "Jupiter"], "SEJ10x")   # <--
#plot_SEJ(["Sun", "Earth", "Jupiter"], "SEJ1000x")   # <--
"""
#plot_EJ_mass_compare(["Earth", "Jupiter"], ['earth_jupiter1x','earth_jupiter10x', 'earth_jupiter1000x'], "earth_jupiter_compare.pdf")
#plot_SEJ(["Sun", "Earth", "Jupiter"], "sunEarthJupiter")
#plot_2D_compare(["earthSun", "earth_jupiter1x"])
#plot_energyAngular_whole()
"""
